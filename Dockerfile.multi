# Multi-stage build - Builder stage
FROM python:3.13-alpine as builder

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

# Set working directory
WORKDIR /app

# Install build dependencies for Alpine
RUN apk update && apk add --no-cache \
    gcc \
    musl-dev \
    postgresql-dev \
    curl \
    build-base \
    libffi-dev

# Install uv
RUN pip install uv

# Copy dependency files
COPY pyproject.toml uv.lock /app/

# Install Python dependencies
RUN uv pip install --system -r <(uv pip compile pyproject.toml)

# Production stage
FROM python:3.13-alpine as production

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    HOST=0.0.0.0 \
    PORT=8000 \
    DEBUG=false

# Set working directory
WORKDIR /app

# Install runtime dependencies for Alpine
RUN apk update && apk add --no-cache \
    curl \
    libpq \
    libffi

# Create non-root user (Alpine uses adduser instead of useradd)
RUN adduser -D -s /bin/sh app \
    && chown -R app:app /app

# Copy Python packages and uv from builder stage
COPY --from=builder /usr/local/lib/python3.13/site-packages /usr/local/lib/python3.13/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin
COPY --from=builder /usr/local/bin/uv /usr/local/bin/uv

# Copy application code
COPY --chown=app:app . .

# Switch to non-root user
USER app

# Create necessary directories
RUN mkdir -p /app/logs /app/data

# Expose port
EXPOSE 8000

# Health check (including database connection check)
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Start command
CMD ["python", "run.py"] 